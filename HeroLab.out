Grammar:

Rule 0     S' -> script
Rule 1     script -> script_ends_stmt
Rule 2     script -> script_ends_nl
Rule 3     script_ends_nl -> script_ends_stmt NEWLINE
Rule 4     script_ends_nl -> script_ends_nl NEWLINE
Rule 5     script_ends_nl -> <empty>
Rule 6     script_ends_stmt -> script_ends_nl statement
Rule 7     statement_set -> _1_statement_NEWLINE_repeat
Rule 8     _1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items
Rule 9     _1_statement_NEWLINE_repeat -> <empty>
Rule 10    _1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item
Rule 11    _1_statement_NEWLINE_items -> _1_statement_NEWLINE_item
Rule 12    _1_statement_NEWLINE_item -> statement NEWLINE
Rule 13    statement -> while_statement
Rule 14    statement -> for_statement
Rule 15    statement -> doneif_statement
Rule 16    statement -> binop_assign
Rule 17    statement -> goto_statement
Rule 18    statement -> if_statement
Rule 19    statement -> assignment
Rule 20    statement -> declaration
Rule 21    statement -> label
Rule 22    label -> ID COLON
Rule 23    declaration -> VAR ID AS STRING
Rule 24    declaration -> VAR ID AS NUMBER
Rule 25    assignment -> reference EQUAL expression
Rule 26    expression -> SCONST
Rule 27    expression -> FLOAT
Rule 28    expression -> ID
Rule 29    expression -> MINUS expression  [precedence=right, level=4]
Rule 30    expression -> LPAREN expression RPAREN
Rule 31    expression -> expression CONCAT expression  [precedence=left, level=3]
Rule 32    expression -> expression MOD expression  [precedence=left, level=2]
Rule 33    expression -> expression DIVIDE expression  [precedence=left, level=2]
Rule 34    expression -> expression TIMES expression  [precedence=left, level=2]
Rule 35    expression -> expression MINUS expression  [precedence=left, level=1]
Rule 36    expression -> expression PLUS expression  [precedence=left, level=1]
Rule 37    reference -> ID
Rule 38    reference -> field_ref
Rule 39    field_ref -> ID dotexpr
Rule 40    field_ref -> THIS dotexpr
Rule 41    dotexpr -> DOT transition
Rule 42    transition -> ID LSQUARE paramlist RSQUARE dotexpr
Rule 43    transition -> ID dotexpr
Rule 44    transition -> ID LSQUARE paramlist RSQUARE
Rule 45    transition -> ID
Rule 46    paramlist -> expression _2_COMMA_expression_repeat
Rule 47    _2_COMMA_expression_repeat -> _2_COMMA_expression_items
Rule 48    _2_COMMA_expression_repeat -> <empty>
Rule 49    _2_COMMA_expression_items -> _2_COMMA_expression_items _2_COMMA_expression_item
Rule 50    _2_COMMA_expression_items -> _2_COMMA_expression_item
Rule 51    _2_COMMA_expression_item -> COMMA expression
Rule 52    expr_comp -> expression EQUAL expression
Rule 53    expr_comp -> expression NE expression
Rule 54    expr_comp -> expression GE expression
Rule 55    expr_comp -> expression GT expression
Rule 56    expr_comp -> expression LE expression
Rule 57    expr_comp -> expression LT expression
Rule 58    binop_assign -> reference CONCATEQUAL expression
Rule 59    binop_assign -> reference MODEQUAL expression
Rule 60    binop_assign -> reference DIVIDEEQUAL expression
Rule 61    binop_assign -> reference TIMESEQUAL expression
Rule 62    binop_assign -> reference MINUSEQUAL expression
Rule 63    binop_assign -> reference PLUSEQUAL expression
Rule 64    goto_statement -> GOTO ID
Rule 65    if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
Rule 66    _3_elsif_statement_repeat -> _3_elsif_statement_items
Rule 67    _3_elsif_statement_repeat -> <empty>
Rule 68    _3_elsif_statement_items -> _3_elsif_statement_items _3_elsif_statement_item
Rule 69    _3_elsif_statement_items -> _3_elsif_statement_item
Rule 70    _3_elsif_statement_item -> elsif_statement
Rule 71    optional_else -> _4_ELSE_NEWLINE_statement_set_optional
Rule 72    _4_ELSE_NEWLINE_statement_set_optional -> ELSE NEWLINE statement_set
Rule 73    _4_ELSE_NEWLINE_statement_set_optional -> <empty>
Rule 74    elsif_statement_list -> _5_elsif_statement_repeat
Rule 75    _5_elsif_statement_repeat -> _5_elsif_statement_items
Rule 76    _5_elsif_statement_repeat -> <empty>
Rule 77    _5_elsif_statement_items -> _5_elsif_statement_items _5_elsif_statement_item
Rule 78    _5_elsif_statement_items -> _5_elsif_statement_item
Rule 79    _5_elsif_statement_item -> elsif_statement
Rule 80    elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set
Rule 81    while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
Rule 82    for_statement -> FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
Rule 83    doneif_statement -> DONEIF LPAREN expr_comp RPAREN

Unused terminals:

    FALSE
    THING
    COMMENT
    MACRO
    BOOTSTRAP
    COUNT
    FOREACH
    NEXTEACH
    TRUE
    WHERE
    LOW
    FIELDVAL
    XOR
    HIGH
    AT
    DEBUG
    NOTIFY
    PORTFOLIO
    APPEND
    PICK
    PERCENT
    IN
    REFERENCE
    TRANSITION
    PERFORM
    VAL
    EACHTHING
    QUESTION
    OR
    TRUSTME
    NOT
    SORTAS
    ACTOR
    DONE

Terminals, with rules where they appear:

ACTOR                : 
APPEND               : 
AS                   : 23 24
AT                   : 
BOOTSTRAP            : 
COLON                : 22
COMMA                : 51
COMMENT              : 
CONCAT               : 31
CONCATEQUAL          : 58
COUNT                : 
DEBUG                : 
DIVIDE               : 33
DIVIDEEQUAL          : 60
DONE                 : 
DONEIF               : 83
DOT                  : 41
EACHTHING            : 
ELSE                 : 72
ELSIF                : 80
ENDIF                : 65
EQUAL                : 25 52 82
FALSE                : 
FIELDVAL             : 
FLOAT                : 27
FOR                  : 82
FOREACH              : 
GE                   : 54
GOTO                 : 64
GT                   : 55
HIGH                 : 
ID                   : 22 23 24 28 37 39 42 43 44 45 64 82
IF                   : 65
IN                   : 
LE                   : 56
LOOP                 : 81
LOW                  : 
LPAREN               : 30 65 80 81 83
LSQUARE              : 42 44
LT                   : 57
MACRO                : 
MINUS                : 29 35
MINUSEQUAL           : 62
MOD                  : 32
MODEQUAL             : 59
NE                   : 53
NEWLINE              : 3 4 12 65 72 80 81 82
NEXT                 : 82
NEXTEACH             : 
NOT                  : 
NOTIFY               : 
NUMBER               : 24
OR                   : 
PERCENT              : 
PERFORM              : 
PICK                 : 
PLUS                 : 36
PLUSEQUAL            : 63
PORTFOLIO            : 
QUESTION             : 
REFERENCE            : 
RPAREN               : 30 65 80 81 83
RSQUARE              : 42 44
SCONST               : 26
SORTAS               : 
STRING               : 23
THEN                 : 65 80
THING                : 
THIS                 : 40
TIMES                : 34
TIMESEQUAL           : 61
TO                   : 82
TRANSITION           : 
TRUE                 : 
TRUSTME              : 
VAL                  : 
VAR                  : 23 24
WHERE                : 
WHILE                : 81
XOR                  : 
error                : 

Nonterminals, with rules where they appear:

_1_statement_NEWLINE_item : 10 11
_1_statement_NEWLINE_items : 8 10
_1_statement_NEWLINE_repeat : 7
_2_COMMA_expression_item : 49 50
_2_COMMA_expression_items : 47 49
_2_COMMA_expression_repeat : 46
_3_elsif_statement_item : 68 69
_3_elsif_statement_items : 66 68
_3_elsif_statement_repeat : 65
_4_ELSE_NEWLINE_statement_set_optional : 71
_5_elsif_statement_item : 77 78
_5_elsif_statement_items : 75 77
_5_elsif_statement_repeat : 74
assignment           : 19
binop_assign         : 16
declaration          : 20
doneif_statement     : 15
dotexpr              : 39 40 42 43
elsif_statement      : 70 79
elsif_statement_list : 
expr_comp            : 65 80 81 83
expression           : 25 29 30 31 31 32 32 33 33 34 34 35 35 36 36 46 51 52 52 53 53 54 54 55 55 56 56 57 57 58 59 60 61 62 63 82 82
field_ref            : 38
for_statement        : 14
goto_statement       : 17
if_statement         : 18
label                : 21
optional_else        : 65
paramlist            : 42 44
reference            : 25 58 59 60 61 62 63
script               : 0
script_ends_nl       : 2 4 6
script_ends_stmt     : 1 3
statement            : 6 12
statement_set        : 65 72 80 81 82
transition           : 41
while_statement      : 13


state 0

    (0) S' -> . script
    (1) script -> . script_ends_stmt
    (2) script -> . script_ends_nl
    (6) script_ends_stmt -> . script_ends_nl statement
    (3) script_ends_nl -> . script_ends_stmt NEWLINE
    (4) script_ends_nl -> . script_ends_nl NEWLINE
    (5) script_ends_nl -> .
    NEWLINE         reduce using rule 5 (script_ends_nl -> .)
    WHILE           reduce using rule 5 (script_ends_nl -> .)
    FOR             reduce using rule 5 (script_ends_nl -> .)
    DONEIF          reduce using rule 5 (script_ends_nl -> .)
    GOTO            reduce using rule 5 (script_ends_nl -> .)
    IF              reduce using rule 5 (script_ends_nl -> .)
    VAR             reduce using rule 5 (script_ends_nl -> .)
    ID              reduce using rule 5 (script_ends_nl -> .)
    THIS            reduce using rule 5 (script_ends_nl -> .)
    $end            reduce using rule 5 (script_ends_nl -> .)

    script                         shift and go to state 1
    script_ends_stmt               shift and go to state 2
    script_ends_nl                 shift and go to state 3

state 1

    (0) S' -> script .


state 2

    (1) script -> script_ends_stmt .
    (3) script_ends_nl -> script_ends_stmt . NEWLINE
    $end            reduce using rule 1 (script -> script_ends_stmt .)
    NEWLINE         shift and go to state 4


state 3

    (2) script -> script_ends_nl .
    (6) script_ends_stmt -> script_ends_nl . statement
    (4) script_ends_nl -> script_ends_nl . NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    $end            reduce using rule 2 (script -> script_ends_nl .)
    NEWLINE         shift and go to state 6
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement                      shift and go to state 5
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 4

    (3) script_ends_nl -> script_ends_stmt NEWLINE .
    NEWLINE         reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    WHILE           reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    FOR             reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    DONEIF          reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    GOTO            reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    IF              reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    VAR             reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    ID              reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    THIS            reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)
    $end            reduce using rule 3 (script_ends_nl -> script_ends_stmt NEWLINE .)


state 5

    (6) script_ends_stmt -> script_ends_nl statement .
    NEWLINE         reduce using rule 6 (script_ends_stmt -> script_ends_nl statement .)
    $end            reduce using rule 6 (script_ends_stmt -> script_ends_nl statement .)


state 6

    (4) script_ends_nl -> script_ends_nl NEWLINE .
    NEWLINE         reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    WHILE           reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    FOR             reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    DONEIF          reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    GOTO            reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    IF              reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    VAR             reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    ID              reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    THIS            reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)
    $end            reduce using rule 4 (script_ends_nl -> script_ends_nl NEWLINE .)


state 7

    (13) statement -> while_statement .
    NEWLINE         reduce using rule 13 (statement -> while_statement .)
    $end            reduce using rule 13 (statement -> while_statement .)


state 8

    (14) statement -> for_statement .
    NEWLINE         reduce using rule 14 (statement -> for_statement .)
    $end            reduce using rule 14 (statement -> for_statement .)


state 9

    (15) statement -> doneif_statement .
    NEWLINE         reduce using rule 15 (statement -> doneif_statement .)
    $end            reduce using rule 15 (statement -> doneif_statement .)


state 10

    (16) statement -> binop_assign .
    NEWLINE         reduce using rule 16 (statement -> binop_assign .)
    $end            reduce using rule 16 (statement -> binop_assign .)


state 11

    (17) statement -> goto_statement .
    NEWLINE         reduce using rule 17 (statement -> goto_statement .)
    $end            reduce using rule 17 (statement -> goto_statement .)


state 12

    (18) statement -> if_statement .
    NEWLINE         reduce using rule 18 (statement -> if_statement .)
    $end            reduce using rule 18 (statement -> if_statement .)


state 13

    (19) statement -> assignment .
    NEWLINE         reduce using rule 19 (statement -> assignment .)
    $end            reduce using rule 19 (statement -> assignment .)


state 14

    (20) statement -> declaration .
    NEWLINE         reduce using rule 20 (statement -> declaration .)
    $end            reduce using rule 20 (statement -> declaration .)


state 15

    (21) statement -> label .
    NEWLINE         reduce using rule 21 (statement -> label .)
    $end            reduce using rule 21 (statement -> label .)


state 16

    (81) while_statement -> WHILE . LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    LPAREN          shift and go to state 26


state 17

    (82) for_statement -> FOR . ID EQUAL expression TO expression NEWLINE statement_set NEXT
    ID              shift and go to state 27


state 18

    (22) label -> ID . COLON
    (37) reference -> ID .
    (39) field_ref -> ID . dotexpr
    (41) dotexpr -> . DOT transition
    COLON           shift and go to state 28
    CONCATEQUAL     reduce using rule 37 (reference -> ID .)
    MODEQUAL        reduce using rule 37 (reference -> ID .)
    DIVIDEEQUAL     reduce using rule 37 (reference -> ID .)
    TIMESEQUAL      reduce using rule 37 (reference -> ID .)
    MINUSEQUAL      reduce using rule 37 (reference -> ID .)
    PLUSEQUAL       reduce using rule 37 (reference -> ID .)
    EQUAL           reduce using rule 37 (reference -> ID .)
    DOT             shift and go to state 30

    dotexpr                        shift and go to state 29

state 19

    (83) doneif_statement -> DONEIF . LPAREN expr_comp RPAREN
    LPAREN          shift and go to state 31


state 20

    (58) binop_assign -> reference . CONCATEQUAL expression
    (59) binop_assign -> reference . MODEQUAL expression
    (60) binop_assign -> reference . DIVIDEEQUAL expression
    (61) binop_assign -> reference . TIMESEQUAL expression
    (62) binop_assign -> reference . MINUSEQUAL expression
    (63) binop_assign -> reference . PLUSEQUAL expression
    (25) assignment -> reference . EQUAL expression
    CONCATEQUAL     shift and go to state 32
    MODEQUAL        shift and go to state 33
    DIVIDEEQUAL     shift and go to state 34
    TIMESEQUAL      shift and go to state 35
    MINUSEQUAL      shift and go to state 36
    PLUSEQUAL       shift and go to state 37
    EQUAL           shift and go to state 38


state 21

    (64) goto_statement -> GOTO . ID
    ID              shift and go to state 39


state 22

    (65) if_statement -> IF . LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    LPAREN          shift and go to state 40


state 23

    (23) declaration -> VAR . ID AS STRING
    (24) declaration -> VAR . ID AS NUMBER
    ID              shift and go to state 41


state 24

    (38) reference -> field_ref .
    CONCATEQUAL     reduce using rule 38 (reference -> field_ref .)
    MODEQUAL        reduce using rule 38 (reference -> field_ref .)
    DIVIDEEQUAL     reduce using rule 38 (reference -> field_ref .)
    TIMESEQUAL      reduce using rule 38 (reference -> field_ref .)
    MINUSEQUAL      reduce using rule 38 (reference -> field_ref .)
    PLUSEQUAL       reduce using rule 38 (reference -> field_ref .)
    EQUAL           reduce using rule 38 (reference -> field_ref .)


state 25

    (40) field_ref -> THIS . dotexpr
    (41) dotexpr -> . DOT transition
    DOT             shift and go to state 30

    dotexpr                        shift and go to state 42

state 26

    (81) while_statement -> WHILE LPAREN . expr_comp RPAREN NEWLINE statement_set LOOP
    (52) expr_comp -> . expression EQUAL expression
    (53) expr_comp -> . expression NE expression
    (54) expr_comp -> . expression GE expression
    (55) expr_comp -> . expression GT expression
    (56) expr_comp -> . expression LE expression
    (57) expr_comp -> . expression LT expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expr_comp                      shift and go to state 44
    expression                     shift and go to state 45

state 27

    (82) for_statement -> FOR ID . EQUAL expression TO expression NEWLINE statement_set NEXT
    EQUAL           shift and go to state 50


state 28

    (22) label -> ID COLON .
    NEWLINE         reduce using rule 22 (label -> ID COLON .)
    $end            reduce using rule 22 (label -> ID COLON .)


state 29

    (39) field_ref -> ID dotexpr .
    CONCATEQUAL     reduce using rule 39 (field_ref -> ID dotexpr .)
    MODEQUAL        reduce using rule 39 (field_ref -> ID dotexpr .)
    DIVIDEEQUAL     reduce using rule 39 (field_ref -> ID dotexpr .)
    TIMESEQUAL      reduce using rule 39 (field_ref -> ID dotexpr .)
    MINUSEQUAL      reduce using rule 39 (field_ref -> ID dotexpr .)
    PLUSEQUAL       reduce using rule 39 (field_ref -> ID dotexpr .)
    EQUAL           reduce using rule 39 (field_ref -> ID dotexpr .)


state 30

    (41) dotexpr -> DOT . transition
    (42) transition -> . ID LSQUARE paramlist RSQUARE dotexpr
    (43) transition -> . ID dotexpr
    (44) transition -> . ID LSQUARE paramlist RSQUARE
    (45) transition -> . ID
    ID              shift and go to state 52

    transition                     shift and go to state 51

state 31

    (83) doneif_statement -> DONEIF LPAREN . expr_comp RPAREN
    (52) expr_comp -> . expression EQUAL expression
    (53) expr_comp -> . expression NE expression
    (54) expr_comp -> . expression GE expression
    (55) expr_comp -> . expression GT expression
    (56) expr_comp -> . expression LE expression
    (57) expr_comp -> . expression LT expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expr_comp                      shift and go to state 53
    expression                     shift and go to state 45

state 32

    (58) binop_assign -> reference CONCATEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 54

state 33

    (59) binop_assign -> reference MODEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 55

state 34

    (60) binop_assign -> reference DIVIDEEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 56

state 35

    (61) binop_assign -> reference TIMESEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 57

state 36

    (62) binop_assign -> reference MINUSEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 58

state 37

    (63) binop_assign -> reference PLUSEQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 59

state 38

    (25) assignment -> reference EQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 60

state 39

    (64) goto_statement -> GOTO ID .
    NEWLINE         reduce using rule 64 (goto_statement -> GOTO ID .)
    $end            reduce using rule 64 (goto_statement -> GOTO ID .)


state 40

    (65) if_statement -> IF LPAREN . expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (52) expr_comp -> . expression EQUAL expression
    (53) expr_comp -> . expression NE expression
    (54) expr_comp -> . expression GE expression
    (55) expr_comp -> . expression GT expression
    (56) expr_comp -> . expression LE expression
    (57) expr_comp -> . expression LT expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expr_comp                      shift and go to state 61
    expression                     shift and go to state 45

state 41

    (23) declaration -> VAR ID . AS STRING
    (24) declaration -> VAR ID . AS NUMBER
    AS              shift and go to state 62


state 42

    (40) field_ref -> THIS dotexpr .
    CONCATEQUAL     reduce using rule 40 (field_ref -> THIS dotexpr .)
    MODEQUAL        reduce using rule 40 (field_ref -> THIS dotexpr .)
    DIVIDEEQUAL     reduce using rule 40 (field_ref -> THIS dotexpr .)
    TIMESEQUAL      reduce using rule 40 (field_ref -> THIS dotexpr .)
    MINUSEQUAL      reduce using rule 40 (field_ref -> THIS dotexpr .)
    PLUSEQUAL       reduce using rule 40 (field_ref -> THIS dotexpr .)
    EQUAL           reduce using rule 40 (field_ref -> THIS dotexpr .)


state 43

    (30) expression -> LPAREN . expression RPAREN
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 63

state 44

    (81) while_statement -> WHILE LPAREN expr_comp . RPAREN NEWLINE statement_set LOOP
    RPAREN          shift and go to state 64


state 45

    (52) expr_comp -> expression . EQUAL expression
    (53) expr_comp -> expression . NE expression
    (54) expr_comp -> expression . GE expression
    (55) expr_comp -> expression . GT expression
    (56) expr_comp -> expression . LE expression
    (57) expr_comp -> expression . LT expression
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           shift and go to state 65
    NE              shift and go to state 66
    GE              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    LT              shift and go to state 70
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 46

    (26) expression -> SCONST .
    EQUAL           reduce using rule 26 (expression -> SCONST .)
    NE              reduce using rule 26 (expression -> SCONST .)
    GE              reduce using rule 26 (expression -> SCONST .)
    GT              reduce using rule 26 (expression -> SCONST .)
    LE              reduce using rule 26 (expression -> SCONST .)
    LT              reduce using rule 26 (expression -> SCONST .)
    CONCAT          reduce using rule 26 (expression -> SCONST .)
    MOD             reduce using rule 26 (expression -> SCONST .)
    DIVIDE          reduce using rule 26 (expression -> SCONST .)
    TIMES           reduce using rule 26 (expression -> SCONST .)
    MINUS           reduce using rule 26 (expression -> SCONST .)
    PLUS            reduce using rule 26 (expression -> SCONST .)
    NEWLINE         reduce using rule 26 (expression -> SCONST .)
    $end            reduce using rule 26 (expression -> SCONST .)
    RPAREN          reduce using rule 26 (expression -> SCONST .)
    TO              reduce using rule 26 (expression -> SCONST .)
    COMMA           reduce using rule 26 (expression -> SCONST .)
    RSQUARE         reduce using rule 26 (expression -> SCONST .)


state 47

    (27) expression -> FLOAT .
    EQUAL           reduce using rule 27 (expression -> FLOAT .)
    NE              reduce using rule 27 (expression -> FLOAT .)
    GE              reduce using rule 27 (expression -> FLOAT .)
    GT              reduce using rule 27 (expression -> FLOAT .)
    LE              reduce using rule 27 (expression -> FLOAT .)
    LT              reduce using rule 27 (expression -> FLOAT .)
    CONCAT          reduce using rule 27 (expression -> FLOAT .)
    MOD             reduce using rule 27 (expression -> FLOAT .)
    DIVIDE          reduce using rule 27 (expression -> FLOAT .)
    TIMES           reduce using rule 27 (expression -> FLOAT .)
    MINUS           reduce using rule 27 (expression -> FLOAT .)
    PLUS            reduce using rule 27 (expression -> FLOAT .)
    NEWLINE         reduce using rule 27 (expression -> FLOAT .)
    $end            reduce using rule 27 (expression -> FLOAT .)
    RPAREN          reduce using rule 27 (expression -> FLOAT .)
    TO              reduce using rule 27 (expression -> FLOAT .)
    COMMA           reduce using rule 27 (expression -> FLOAT .)
    RSQUARE         reduce using rule 27 (expression -> FLOAT .)


state 48

    (28) expression -> ID .
    EQUAL           reduce using rule 28 (expression -> ID .)
    NE              reduce using rule 28 (expression -> ID .)
    GE              reduce using rule 28 (expression -> ID .)
    GT              reduce using rule 28 (expression -> ID .)
    LE              reduce using rule 28 (expression -> ID .)
    LT              reduce using rule 28 (expression -> ID .)
    CONCAT          reduce using rule 28 (expression -> ID .)
    MOD             reduce using rule 28 (expression -> ID .)
    DIVIDE          reduce using rule 28 (expression -> ID .)
    TIMES           reduce using rule 28 (expression -> ID .)
    MINUS           reduce using rule 28 (expression -> ID .)
    PLUS            reduce using rule 28 (expression -> ID .)
    NEWLINE         reduce using rule 28 (expression -> ID .)
    $end            reduce using rule 28 (expression -> ID .)
    RPAREN          reduce using rule 28 (expression -> ID .)
    TO              reduce using rule 28 (expression -> ID .)
    COMMA           reduce using rule 28 (expression -> ID .)
    RSQUARE         reduce using rule 28 (expression -> ID .)


state 49

    (29) expression -> MINUS . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 77

state 50

    (82) for_statement -> FOR ID EQUAL . expression TO expression NEWLINE statement_set NEXT
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 78

state 51

    (41) dotexpr -> DOT transition .
    CONCATEQUAL     reduce using rule 41 (dotexpr -> DOT transition .)
    MODEQUAL        reduce using rule 41 (dotexpr -> DOT transition .)
    DIVIDEEQUAL     reduce using rule 41 (dotexpr -> DOT transition .)
    TIMESEQUAL      reduce using rule 41 (dotexpr -> DOT transition .)
    MINUSEQUAL      reduce using rule 41 (dotexpr -> DOT transition .)
    PLUSEQUAL       reduce using rule 41 (dotexpr -> DOT transition .)
    EQUAL           reduce using rule 41 (dotexpr -> DOT transition .)


state 52

    (42) transition -> ID . LSQUARE paramlist RSQUARE dotexpr
    (43) transition -> ID . dotexpr
    (44) transition -> ID . LSQUARE paramlist RSQUARE
    (45) transition -> ID .
    (41) dotexpr -> . DOT transition
    LSQUARE         shift and go to state 79
    CONCATEQUAL     reduce using rule 45 (transition -> ID .)
    MODEQUAL        reduce using rule 45 (transition -> ID .)
    DIVIDEEQUAL     reduce using rule 45 (transition -> ID .)
    TIMESEQUAL      reduce using rule 45 (transition -> ID .)
    MINUSEQUAL      reduce using rule 45 (transition -> ID .)
    PLUSEQUAL       reduce using rule 45 (transition -> ID .)
    EQUAL           reduce using rule 45 (transition -> ID .)
    DOT             shift and go to state 30

    dotexpr                        shift and go to state 80

state 53

    (83) doneif_statement -> DONEIF LPAREN expr_comp . RPAREN
    RPAREN          shift and go to state 81


state 54

    (58) binop_assign -> reference CONCATEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 58 (binop_assign -> reference CONCATEQUAL expression .)
    $end            reduce using rule 58 (binop_assign -> reference CONCATEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 55

    (59) binop_assign -> reference MODEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 59 (binop_assign -> reference MODEQUAL expression .)
    $end            reduce using rule 59 (binop_assign -> reference MODEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 56

    (60) binop_assign -> reference DIVIDEEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 60 (binop_assign -> reference DIVIDEEQUAL expression .)
    $end            reduce using rule 60 (binop_assign -> reference DIVIDEEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 57

    (61) binop_assign -> reference TIMESEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 61 (binop_assign -> reference TIMESEQUAL expression .)
    $end            reduce using rule 61 (binop_assign -> reference TIMESEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 58

    (62) binop_assign -> reference MINUSEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 62 (binop_assign -> reference MINUSEQUAL expression .)
    $end            reduce using rule 62 (binop_assign -> reference MINUSEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 59

    (63) binop_assign -> reference PLUSEQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 63 (binop_assign -> reference PLUSEQUAL expression .)
    $end            reduce using rule 63 (binop_assign -> reference PLUSEQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 60

    (25) assignment -> reference EQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 25 (assignment -> reference EQUAL expression .)
    $end            reduce using rule 25 (assignment -> reference EQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 61

    (65) if_statement -> IF LPAREN expr_comp . RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    RPAREN          shift and go to state 82


state 62

    (23) declaration -> VAR ID AS . STRING
    (24) declaration -> VAR ID AS . NUMBER
    STRING          shift and go to state 83
    NUMBER          shift and go to state 84


state 63

    (30) expression -> LPAREN expression . RPAREN
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          shift and go to state 85
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 64

    (81) while_statement -> WHILE LPAREN expr_comp RPAREN . NEWLINE statement_set LOOP
    NEWLINE         shift and go to state 86


state 65

    (52) expr_comp -> expression EQUAL . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 87

state 66

    (53) expr_comp -> expression NE . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 88

state 67

    (54) expr_comp -> expression GE . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 89

state 68

    (55) expr_comp -> expression GT . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 90

state 69

    (56) expr_comp -> expression LE . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 91

state 70

    (57) expr_comp -> expression LT . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 92

state 71

    (31) expression -> expression CONCAT . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 93

state 72

    (32) expression -> expression MOD . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 94

state 73

    (33) expression -> expression DIVIDE . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 95

state 74

    (34) expression -> expression TIMES . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 96

state 75

    (35) expression -> expression MINUS . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 97

state 76

    (36) expression -> expression PLUS . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 98

state 77

    (29) expression -> MINUS expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 29 (expression -> MINUS expression .)
    NE              reduce using rule 29 (expression -> MINUS expression .)
    GE              reduce using rule 29 (expression -> MINUS expression .)
    GT              reduce using rule 29 (expression -> MINUS expression .)
    LE              reduce using rule 29 (expression -> MINUS expression .)
    LT              reduce using rule 29 (expression -> MINUS expression .)
    CONCAT          reduce using rule 29 (expression -> MINUS expression .)
    MOD             reduce using rule 29 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 29 (expression -> MINUS expression .)
    TIMES           reduce using rule 29 (expression -> MINUS expression .)
    MINUS           reduce using rule 29 (expression -> MINUS expression .)
    PLUS            reduce using rule 29 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 29 (expression -> MINUS expression .)
    $end            reduce using rule 29 (expression -> MINUS expression .)
    RPAREN          reduce using rule 29 (expression -> MINUS expression .)
    TO              reduce using rule 29 (expression -> MINUS expression .)
    COMMA           reduce using rule 29 (expression -> MINUS expression .)
    RSQUARE         reduce using rule 29 (expression -> MINUS expression .)


state 78

    (82) for_statement -> FOR ID EQUAL expression . TO expression NEWLINE statement_set NEXT
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    TO              shift and go to state 99
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 79

    (42) transition -> ID LSQUARE . paramlist RSQUARE dotexpr
    (44) transition -> ID LSQUARE . paramlist RSQUARE
    (46) paramlist -> . expression _2_COMMA_expression_repeat
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    paramlist                      shift and go to state 100
    expression                     shift and go to state 101

state 80

    (43) transition -> ID dotexpr .
    CONCATEQUAL     reduce using rule 43 (transition -> ID dotexpr .)
    MODEQUAL        reduce using rule 43 (transition -> ID dotexpr .)
    DIVIDEEQUAL     reduce using rule 43 (transition -> ID dotexpr .)
    TIMESEQUAL      reduce using rule 43 (transition -> ID dotexpr .)
    MINUSEQUAL      reduce using rule 43 (transition -> ID dotexpr .)
    PLUSEQUAL       reduce using rule 43 (transition -> ID dotexpr .)
    EQUAL           reduce using rule 43 (transition -> ID dotexpr .)


state 81

    (83) doneif_statement -> DONEIF LPAREN expr_comp RPAREN .
    NEWLINE         reduce using rule 83 (doneif_statement -> DONEIF LPAREN expr_comp RPAREN .)
    $end            reduce using rule 83 (doneif_statement -> DONEIF LPAREN expr_comp RPAREN .)


state 82

    (65) if_statement -> IF LPAREN expr_comp RPAREN . THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    THEN            shift and go to state 102


state 83

    (23) declaration -> VAR ID AS STRING .
    NEWLINE         reduce using rule 23 (declaration -> VAR ID AS STRING .)
    $end            reduce using rule 23 (declaration -> VAR ID AS STRING .)


state 84

    (24) declaration -> VAR ID AS NUMBER .
    NEWLINE         reduce using rule 24 (declaration -> VAR ID AS NUMBER .)
    $end            reduce using rule 24 (declaration -> VAR ID AS NUMBER .)


state 85

    (30) expression -> LPAREN expression RPAREN .
    EQUAL           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 30 (expression -> LPAREN expression RPAREN .)


state 86

    (81) while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE . statement_set LOOP
    (7) statement_set -> . _1_statement_NEWLINE_repeat
    (8) _1_statement_NEWLINE_repeat -> . _1_statement_NEWLINE_items
    (9) _1_statement_NEWLINE_repeat -> .
    (10) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_items _1_statement_NEWLINE_item
    (11) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    LOOP            reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement_set                  shift and go to state 103
    _1_statement_NEWLINE_repeat    shift and go to state 104
    _1_statement_NEWLINE_items     shift and go to state 105
    _1_statement_NEWLINE_item      shift and go to state 106
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 87

    (52) expr_comp -> expression EQUAL expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 52 (expr_comp -> expression EQUAL expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 88

    (53) expr_comp -> expression NE expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 53 (expr_comp -> expression NE expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 89

    (54) expr_comp -> expression GE expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 54 (expr_comp -> expression GE expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 90

    (55) expr_comp -> expression GT expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 55 (expr_comp -> expression GT expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 91

    (56) expr_comp -> expression LE expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 56 (expr_comp -> expression LE expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 92

    (57) expr_comp -> expression LT expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    RPAREN          reduce using rule 57 (expr_comp -> expression LT expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 93

    (31) expression -> expression CONCAT expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 31 (expression -> expression CONCAT expression .)
    NE              reduce using rule 31 (expression -> expression CONCAT expression .)
    GE              reduce using rule 31 (expression -> expression CONCAT expression .)
    GT              reduce using rule 31 (expression -> expression CONCAT expression .)
    LE              reduce using rule 31 (expression -> expression CONCAT expression .)
    LT              reduce using rule 31 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 31 (expression -> expression CONCAT expression .)
    MOD             reduce using rule 31 (expression -> expression CONCAT expression .)
    DIVIDE          reduce using rule 31 (expression -> expression CONCAT expression .)
    TIMES           reduce using rule 31 (expression -> expression CONCAT expression .)
    MINUS           reduce using rule 31 (expression -> expression CONCAT expression .)
    PLUS            reduce using rule 31 (expression -> expression CONCAT expression .)
    NEWLINE         reduce using rule 31 (expression -> expression CONCAT expression .)
    $end            reduce using rule 31 (expression -> expression CONCAT expression .)
    RPAREN          reduce using rule 31 (expression -> expression CONCAT expression .)
    TO              reduce using rule 31 (expression -> expression CONCAT expression .)
    COMMA           reduce using rule 31 (expression -> expression CONCAT expression .)
    RSQUARE         reduce using rule 31 (expression -> expression CONCAT expression .)


state 94

    (32) expression -> expression MOD expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 32 (expression -> expression MOD expression .)
    NE              reduce using rule 32 (expression -> expression MOD expression .)
    GE              reduce using rule 32 (expression -> expression MOD expression .)
    GT              reduce using rule 32 (expression -> expression MOD expression .)
    LE              reduce using rule 32 (expression -> expression MOD expression .)
    LT              reduce using rule 32 (expression -> expression MOD expression .)
    MOD             reduce using rule 32 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 32 (expression -> expression MOD expression .)
    TIMES           reduce using rule 32 (expression -> expression MOD expression .)
    MINUS           reduce using rule 32 (expression -> expression MOD expression .)
    PLUS            reduce using rule 32 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 32 (expression -> expression MOD expression .)
    $end            reduce using rule 32 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 32 (expression -> expression MOD expression .)
    TO              reduce using rule 32 (expression -> expression MOD expression .)
    COMMA           reduce using rule 32 (expression -> expression MOD expression .)
    RSQUARE         reduce using rule 32 (expression -> expression MOD expression .)
    CONCAT          shift and go to state 71


state 95

    (33) expression -> expression DIVIDE expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 33 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 33 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 33 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 33 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 33 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 33 (expression -> expression DIVIDE expression .)
    CONCAT          shift and go to state 71


state 96

    (34) expression -> expression TIMES expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 34 (expression -> expression TIMES expression .)
    NE              reduce using rule 34 (expression -> expression TIMES expression .)
    GE              reduce using rule 34 (expression -> expression TIMES expression .)
    GT              reduce using rule 34 (expression -> expression TIMES expression .)
    LE              reduce using rule 34 (expression -> expression TIMES expression .)
    LT              reduce using rule 34 (expression -> expression TIMES expression .)
    MOD             reduce using rule 34 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 34 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 34 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 34 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 34 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 34 (expression -> expression TIMES expression .)
    $end            reduce using rule 34 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 34 (expression -> expression TIMES expression .)
    TO              reduce using rule 34 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 34 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 34 (expression -> expression TIMES expression .)
    CONCAT          shift and go to state 71


state 97

    (35) expression -> expression MINUS expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 35 (expression -> expression MINUS expression .)
    NE              reduce using rule 35 (expression -> expression MINUS expression .)
    GE              reduce using rule 35 (expression -> expression MINUS expression .)
    GT              reduce using rule 35 (expression -> expression MINUS expression .)
    LE              reduce using rule 35 (expression -> expression MINUS expression .)
    LT              reduce using rule 35 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 35 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 35 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 35 (expression -> expression MINUS expression .)
    $end            reduce using rule 35 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression MINUS expression .)
    TO              reduce using rule 35 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 35 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 35 (expression -> expression MINUS expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74


state 98

    (36) expression -> expression PLUS expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    EQUAL           reduce using rule 36 (expression -> expression PLUS expression .)
    NE              reduce using rule 36 (expression -> expression PLUS expression .)
    GE              reduce using rule 36 (expression -> expression PLUS expression .)
    GT              reduce using rule 36 (expression -> expression PLUS expression .)
    LE              reduce using rule 36 (expression -> expression PLUS expression .)
    LT              reduce using rule 36 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 36 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 36 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 36 (expression -> expression PLUS expression .)
    $end            reduce using rule 36 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 36 (expression -> expression PLUS expression .)
    TO              reduce using rule 36 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 36 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 36 (expression -> expression PLUS expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74


state 99

    (82) for_statement -> FOR ID EQUAL expression TO . expression NEWLINE statement_set NEXT
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 108

state 100

    (42) transition -> ID LSQUARE paramlist . RSQUARE dotexpr
    (44) transition -> ID LSQUARE paramlist . RSQUARE
    RSQUARE         shift and go to state 109


state 101

    (46) paramlist -> expression . _2_COMMA_expression_repeat
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    (47) _2_COMMA_expression_repeat -> . _2_COMMA_expression_items
    (48) _2_COMMA_expression_repeat -> .
    (49) _2_COMMA_expression_items -> . _2_COMMA_expression_items _2_COMMA_expression_item
    (50) _2_COMMA_expression_items -> . _2_COMMA_expression_item
    (51) _2_COMMA_expression_item -> . COMMA expression
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76
    RSQUARE         reduce using rule 48 (_2_COMMA_expression_repeat -> .)
    COMMA           shift and go to state 113

    _2_COMMA_expression_repeat     shift and go to state 110
    _2_COMMA_expression_items      shift and go to state 111
    _2_COMMA_expression_item       shift and go to state 112

state 102

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN . NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    NEWLINE         shift and go to state 114


state 103

    (81) while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE statement_set . LOOP
    LOOP            shift and go to state 115


state 104

    (7) statement_set -> _1_statement_NEWLINE_repeat .
    LOOP            reduce using rule 7 (statement_set -> _1_statement_NEWLINE_repeat .)
    ELSIF           reduce using rule 7 (statement_set -> _1_statement_NEWLINE_repeat .)
    ELSE            reduce using rule 7 (statement_set -> _1_statement_NEWLINE_repeat .)
    ENDIF           reduce using rule 7 (statement_set -> _1_statement_NEWLINE_repeat .)
    NEXT            reduce using rule 7 (statement_set -> _1_statement_NEWLINE_repeat .)


state 105

    (8) _1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .
    (10) _1_statement_NEWLINE_items -> _1_statement_NEWLINE_items . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    LOOP            reduce using rule 8 (_1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .)
    ELSIF           reduce using rule 8 (_1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .)
    ELSE            reduce using rule 8 (_1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .)
    ENDIF           reduce using rule 8 (_1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .)
    NEXT            reduce using rule 8 (_1_statement_NEWLINE_repeat -> _1_statement_NEWLINE_items .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    _1_statement_NEWLINE_item      shift and go to state 116
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 106

    (11) _1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .
    WHILE           reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    FOR             reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    DONEIF          reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    GOTO            reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    IF              reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    VAR             reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    ID              reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    THIS            reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    LOOP            reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    ELSIF           reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    ELSE            reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    ENDIF           reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)
    NEXT            reduce using rule 11 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_item .)


state 107

    (12) _1_statement_NEWLINE_item -> statement . NEWLINE
    NEWLINE         shift and go to state 117


state 108

    (82) for_statement -> FOR ID EQUAL expression TO expression . NEWLINE statement_set NEXT
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    NEWLINE         shift and go to state 118
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 109

    (42) transition -> ID LSQUARE paramlist RSQUARE . dotexpr
    (44) transition -> ID LSQUARE paramlist RSQUARE .
    (41) dotexpr -> . DOT transition
    CONCATEQUAL     reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    MODEQUAL        reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    DIVIDEEQUAL     reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    TIMESEQUAL      reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    MINUSEQUAL      reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    PLUSEQUAL       reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    EQUAL           reduce using rule 44 (transition -> ID LSQUARE paramlist RSQUARE .)
    DOT             shift and go to state 30

    dotexpr                        shift and go to state 119

state 110

    (46) paramlist -> expression _2_COMMA_expression_repeat .
    RSQUARE         reduce using rule 46 (paramlist -> expression _2_COMMA_expression_repeat .)


state 111

    (47) _2_COMMA_expression_repeat -> _2_COMMA_expression_items .
    (49) _2_COMMA_expression_items -> _2_COMMA_expression_items . _2_COMMA_expression_item
    (51) _2_COMMA_expression_item -> . COMMA expression
    RSQUARE         reduce using rule 47 (_2_COMMA_expression_repeat -> _2_COMMA_expression_items .)
    COMMA           shift and go to state 113

    _2_COMMA_expression_item       shift and go to state 120

state 112

    (50) _2_COMMA_expression_items -> _2_COMMA_expression_item .
    COMMA           reduce using rule 50 (_2_COMMA_expression_items -> _2_COMMA_expression_item .)
    RSQUARE         reduce using rule 50 (_2_COMMA_expression_items -> _2_COMMA_expression_item .)


state 113

    (51) _2_COMMA_expression_item -> COMMA . expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expression                     shift and go to state 121

state 114

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE . statement_set _3_elsif_statement_repeat optional_else ENDIF
    (7) statement_set -> . _1_statement_NEWLINE_repeat
    (8) _1_statement_NEWLINE_repeat -> . _1_statement_NEWLINE_items
    (9) _1_statement_NEWLINE_repeat -> .
    (10) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_items _1_statement_NEWLINE_item
    (11) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    ELSIF           reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    ELSE            reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    ENDIF           reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement_set                  shift and go to state 122
    _1_statement_NEWLINE_repeat    shift and go to state 104
    _1_statement_NEWLINE_items     shift and go to state 105
    _1_statement_NEWLINE_item      shift and go to state 106
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 115

    (81) while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP .
    NEWLINE         reduce using rule 81 (while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP .)
    $end            reduce using rule 81 (while_statement -> WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP .)


state 116

    (10) _1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .
    WHILE           reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    FOR             reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    DONEIF          reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    GOTO            reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    IF              reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    VAR             reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    ID              reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    THIS            reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    LOOP            reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    ELSIF           reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    ELSE            reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    ENDIF           reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)
    NEXT            reduce using rule 10 (_1_statement_NEWLINE_items -> _1_statement_NEWLINE_items _1_statement_NEWLINE_item .)


state 117

    (12) _1_statement_NEWLINE_item -> statement NEWLINE .
    WHILE           reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    FOR             reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    DONEIF          reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    GOTO            reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    IF              reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    VAR             reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    ID              reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    THIS            reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    LOOP            reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    ELSIF           reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    ELSE            reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    ENDIF           reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)
    NEXT            reduce using rule 12 (_1_statement_NEWLINE_item -> statement NEWLINE .)


state 118

    (82) for_statement -> FOR ID EQUAL expression TO expression NEWLINE . statement_set NEXT
    (7) statement_set -> . _1_statement_NEWLINE_repeat
    (8) _1_statement_NEWLINE_repeat -> . _1_statement_NEWLINE_items
    (9) _1_statement_NEWLINE_repeat -> .
    (10) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_items _1_statement_NEWLINE_item
    (11) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    NEXT            reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement_set                  shift and go to state 123
    _1_statement_NEWLINE_repeat    shift and go to state 104
    _1_statement_NEWLINE_items     shift and go to state 105
    _1_statement_NEWLINE_item      shift and go to state 106
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 119

    (42) transition -> ID LSQUARE paramlist RSQUARE dotexpr .
    CONCATEQUAL     reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    MODEQUAL        reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    DIVIDEEQUAL     reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    TIMESEQUAL      reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    MINUSEQUAL      reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    PLUSEQUAL       reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)
    EQUAL           reduce using rule 42 (transition -> ID LSQUARE paramlist RSQUARE dotexpr .)


state 120

    (49) _2_COMMA_expression_items -> _2_COMMA_expression_items _2_COMMA_expression_item .
    COMMA           reduce using rule 49 (_2_COMMA_expression_items -> _2_COMMA_expression_items _2_COMMA_expression_item .)
    RSQUARE         reduce using rule 49 (_2_COMMA_expression_items -> _2_COMMA_expression_items _2_COMMA_expression_item .)


state 121

    (51) _2_COMMA_expression_item -> COMMA expression .
    (31) expression -> expression . CONCAT expression
    (32) expression -> expression . MOD expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . PLUS expression
    COMMA           reduce using rule 51 (_2_COMMA_expression_item -> COMMA expression .)
    RSQUARE         reduce using rule 51 (_2_COMMA_expression_item -> COMMA expression .)
    CONCAT          shift and go to state 71
    MOD             shift and go to state 72
    DIVIDE          shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75
    PLUS            shift and go to state 76


state 122

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set . _3_elsif_statement_repeat optional_else ENDIF
    (66) _3_elsif_statement_repeat -> . _3_elsif_statement_items
    (67) _3_elsif_statement_repeat -> .
    (68) _3_elsif_statement_items -> . _3_elsif_statement_items _3_elsif_statement_item
    (69) _3_elsif_statement_items -> . _3_elsif_statement_item
    (70) _3_elsif_statement_item -> . elsif_statement
    (80) elsif_statement -> . ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set
    ELSE            reduce using rule 67 (_3_elsif_statement_repeat -> .)
    ENDIF           reduce using rule 67 (_3_elsif_statement_repeat -> .)
    ELSIF           shift and go to state 128

    _3_elsif_statement_repeat      shift and go to state 124
    _3_elsif_statement_items       shift and go to state 125
    _3_elsif_statement_item        shift and go to state 126
    elsif_statement                shift and go to state 127

state 123

    (82) for_statement -> FOR ID EQUAL expression TO expression NEWLINE statement_set . NEXT
    NEXT            shift and go to state 129


state 124

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat . optional_else ENDIF
    (71) optional_else -> . _4_ELSE_NEWLINE_statement_set_optional
    (72) _4_ELSE_NEWLINE_statement_set_optional -> . ELSE NEWLINE statement_set
    (73) _4_ELSE_NEWLINE_statement_set_optional -> .
    ELSE            shift and go to state 132
    ENDIF           reduce using rule 73 (_4_ELSE_NEWLINE_statement_set_optional -> .)

    optional_else                  shift and go to state 130
    _4_ELSE_NEWLINE_statement_set_optional shift and go to state 131

state 125

    (66) _3_elsif_statement_repeat -> _3_elsif_statement_items .
    (68) _3_elsif_statement_items -> _3_elsif_statement_items . _3_elsif_statement_item
    (70) _3_elsif_statement_item -> . elsif_statement
    (80) elsif_statement -> . ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set
    ELSE            reduce using rule 66 (_3_elsif_statement_repeat -> _3_elsif_statement_items .)
    ENDIF           reduce using rule 66 (_3_elsif_statement_repeat -> _3_elsif_statement_items .)
    ELSIF           shift and go to state 128

    _3_elsif_statement_item        shift and go to state 133
    elsif_statement                shift and go to state 127

state 126

    (69) _3_elsif_statement_items -> _3_elsif_statement_item .
    ELSIF           reduce using rule 69 (_3_elsif_statement_items -> _3_elsif_statement_item .)
    ELSE            reduce using rule 69 (_3_elsif_statement_items -> _3_elsif_statement_item .)
    ENDIF           reduce using rule 69 (_3_elsif_statement_items -> _3_elsif_statement_item .)


state 127

    (70) _3_elsif_statement_item -> elsif_statement .
    ELSIF           reduce using rule 70 (_3_elsif_statement_item -> elsif_statement .)
    ELSE            reduce using rule 70 (_3_elsif_statement_item -> elsif_statement .)
    ENDIF           reduce using rule 70 (_3_elsif_statement_item -> elsif_statement .)


state 128

    (80) elsif_statement -> ELSIF . LPAREN expr_comp RPAREN THEN NEWLINE statement_set
    LPAREN          shift and go to state 134


state 129

    (82) for_statement -> FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT .
    NEWLINE         reduce using rule 82 (for_statement -> FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT .)
    $end            reduce using rule 82 (for_statement -> FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT .)


state 130

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else . ENDIF
    ENDIF           shift and go to state 135


state 131

    (71) optional_else -> _4_ELSE_NEWLINE_statement_set_optional .
    ENDIF           reduce using rule 71 (optional_else -> _4_ELSE_NEWLINE_statement_set_optional .)


state 132

    (72) _4_ELSE_NEWLINE_statement_set_optional -> ELSE . NEWLINE statement_set
    NEWLINE         shift and go to state 136


state 133

    (68) _3_elsif_statement_items -> _3_elsif_statement_items _3_elsif_statement_item .
    ELSIF           reduce using rule 68 (_3_elsif_statement_items -> _3_elsif_statement_items _3_elsif_statement_item .)
    ELSE            reduce using rule 68 (_3_elsif_statement_items -> _3_elsif_statement_items _3_elsif_statement_item .)
    ENDIF           reduce using rule 68 (_3_elsif_statement_items -> _3_elsif_statement_items _3_elsif_statement_item .)


state 134

    (80) elsif_statement -> ELSIF LPAREN . expr_comp RPAREN THEN NEWLINE statement_set
    (52) expr_comp -> . expression EQUAL expression
    (53) expr_comp -> . expression NE expression
    (54) expr_comp -> . expression GE expression
    (55) expr_comp -> . expression GT expression
    (56) expr_comp -> . expression LE expression
    (57) expr_comp -> . expression LT expression
    (26) expression -> . SCONST
    (27) expression -> . FLOAT
    (28) expression -> . ID
    (29) expression -> . MINUS expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression CONCAT expression
    (32) expression -> . expression MOD expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression PLUS expression
    SCONST          shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 43

    expr_comp                      shift and go to state 137
    expression                     shift and go to state 45

state 135

    (65) if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF .
    NEWLINE         reduce using rule 65 (if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF .)
    $end            reduce using rule 65 (if_statement -> IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF .)


state 136

    (72) _4_ELSE_NEWLINE_statement_set_optional -> ELSE NEWLINE . statement_set
    (7) statement_set -> . _1_statement_NEWLINE_repeat
    (8) _1_statement_NEWLINE_repeat -> . _1_statement_NEWLINE_items
    (9) _1_statement_NEWLINE_repeat -> .
    (10) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_items _1_statement_NEWLINE_item
    (11) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    ENDIF           reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement_set                  shift and go to state 138
    _1_statement_NEWLINE_repeat    shift and go to state 104
    _1_statement_NEWLINE_items     shift and go to state 105
    _1_statement_NEWLINE_item      shift and go to state 106
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 137

    (80) elsif_statement -> ELSIF LPAREN expr_comp . RPAREN THEN NEWLINE statement_set
    RPAREN          shift and go to state 139


state 138

    (72) _4_ELSE_NEWLINE_statement_set_optional -> ELSE NEWLINE statement_set .
    ENDIF           reduce using rule 72 (_4_ELSE_NEWLINE_statement_set_optional -> ELSE NEWLINE statement_set .)


state 139

    (80) elsif_statement -> ELSIF LPAREN expr_comp RPAREN . THEN NEWLINE statement_set
    THEN            shift and go to state 140


state 140

    (80) elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN . NEWLINE statement_set
    NEWLINE         shift and go to state 141


state 141

    (80) elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE . statement_set
    (7) statement_set -> . _1_statement_NEWLINE_repeat
    (8) _1_statement_NEWLINE_repeat -> . _1_statement_NEWLINE_items
    (9) _1_statement_NEWLINE_repeat -> .
    (10) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_items _1_statement_NEWLINE_item
    (11) _1_statement_NEWLINE_items -> . _1_statement_NEWLINE_item
    (12) _1_statement_NEWLINE_item -> . statement NEWLINE
    (13) statement -> . while_statement
    (14) statement -> . for_statement
    (15) statement -> . doneif_statement
    (16) statement -> . binop_assign
    (17) statement -> . goto_statement
    (18) statement -> . if_statement
    (19) statement -> . assignment
    (20) statement -> . declaration
    (21) statement -> . label
    (81) while_statement -> . WHILE LPAREN expr_comp RPAREN NEWLINE statement_set LOOP
    (82) for_statement -> . FOR ID EQUAL expression TO expression NEWLINE statement_set NEXT
    (83) doneif_statement -> . DONEIF LPAREN expr_comp RPAREN
    (58) binop_assign -> . reference CONCATEQUAL expression
    (59) binop_assign -> . reference MODEQUAL expression
    (60) binop_assign -> . reference DIVIDEEQUAL expression
    (61) binop_assign -> . reference TIMESEQUAL expression
    (62) binop_assign -> . reference MINUSEQUAL expression
    (63) binop_assign -> . reference PLUSEQUAL expression
    (64) goto_statement -> . GOTO ID
    (65) if_statement -> . IF LPAREN expr_comp RPAREN THEN NEWLINE statement_set _3_elsif_statement_repeat optional_else ENDIF
    (25) assignment -> . reference EQUAL expression
    (23) declaration -> . VAR ID AS STRING
    (24) declaration -> . VAR ID AS NUMBER
    (22) label -> . ID COLON
    (37) reference -> . ID
    (38) reference -> . field_ref
    (39) field_ref -> . ID dotexpr
    (40) field_ref -> . THIS dotexpr
    ELSIF           reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    ELSE            reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    ENDIF           reduce using rule 9 (_1_statement_NEWLINE_repeat -> .)
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    DONEIF          shift and go to state 19
    GOTO            shift and go to state 21
    IF              shift and go to state 22
    VAR             shift and go to state 23
    ID              shift and go to state 18
    THIS            shift and go to state 25

    statement_set                  shift and go to state 142
    _1_statement_NEWLINE_repeat    shift and go to state 104
    _1_statement_NEWLINE_items     shift and go to state 105
    _1_statement_NEWLINE_item      shift and go to state 106
    statement                      shift and go to state 107
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    doneif_statement               shift and go to state 9
    binop_assign                   shift and go to state 10
    goto_statement                 shift and go to state 11
    if_statement                   shift and go to state 12
    assignment                     shift and go to state 13
    declaration                    shift and go to state 14
    label                          shift and go to state 15
    reference                      shift and go to state 20
    field_ref                      shift and go to state 24

state 142

    (80) elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set .
    ELSIF           reduce using rule 80 (elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set .)
    ELSE            reduce using rule 80 (elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set .)
    ENDIF           reduce using rule 80 (elsif_statement -> ELSIF LPAREN expr_comp RPAREN THEN NEWLINE statement_set .)
